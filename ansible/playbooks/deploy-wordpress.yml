---
- name: ðŸš€ Deploy WordPress to ECS (Fargate)
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - all.yml
  vars:
    desired_count: 1


  tasks:
    # ----------------------------
    # 1. Get current task definition
    # ----------------------------
    - name: Get current ECS task definition
      community.aws.ecs_taskdefinition_info:  
        task_definition: "{{ ecs_task_family }}"
        region: "{{ aws_region }}"
      register: ecs_task_def

    - name: Debug - Show ECS task definition info
      debug:
        var: ecs_task_def

    # ----------------------------
    # 2. Create a new task definition revision
    # ----------------------------
    - name: Create new ECS task definition revision
      community.aws.ecs_taskdefinition:
        state: present
        family: "{{ ecs_task_family }}"
        network_mode: awsvpc                  # Required for Fargate
        cpu: 1024
        memory: 2048
        execution_role_arn: "{{ ecs_task_def.execution_role_arn }}"
        containers: |
          [
            {
              "name": "wordpress",
              "image": "{{ docker_image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "{{ cloudwatch_log_group }}",
                  "awslogs-region": "{{ aws_region }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {"name": "WORDPRESS_DB_HOST", "value": "{{ db_host }}"},
                {"name": "WORDPRESS_DB_NAME", "value": "{{ db_name }}"},
                {"name": "WORDPRESS_DB_USER", "value": "{{ db_user }}"},
                {"name": "WORDPRESS_DB_PASSWORD", "value": "{{ db_password }}"}
              ]
            }
          ]
        region: "{{ aws_region }}"
      register: new_task_def

    # ----------------------------
    # 3. Update ECS service
    # ----------------------------
    - name: Update ECS service to use new task definition
      community.aws.ecs_service:
        state: present
        name: "{{ ecs_service }}"
        cluster: "{{ ecs_cluster }}"
        task_definition: "{{ new_task_def.task_definition.taskDefinitionArn }}"
        desired_count: "{{ desired_count }}"
        launch_type: FARGATE
        network_configuration:
          assign_public_ip: true
          security_groups:
            - "{{ security_group_id }}"
          subnets:
            - "{{ subnet_id_1 }}"
            - "{{ subnet_id_2 }}"
        region: "{{ aws_region }}"
      register: ecs_service_result

    # ----------------------------
    # 4. Wait for ECS service stability
    # ----------------------------
    - name: Wait until ECS service is stable
      community.aws.ecs_service_info:
        name: "{{ ecs_service }}"
        cluster: "{{ ecs_cluster }}"
        region: "{{ aws_region }}"
      register: service_status
      until: service_status.services[0].runningCount == desired_count
      retries: 10
      delay: 30

    # ----------------------------
    # 5. Show deployment status
    # ----------------------------
    - name: Display deployment status
      debug:
        msg: "âœ… Deployment successful! Running count: {{ service_status.services[0].runningCount }}"
