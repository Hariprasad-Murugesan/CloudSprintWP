---
- name: ðŸ“Š Start deployment logging
  import_playbook: ansible-logging.yml
  tags: logging

- name: ðŸš€ Deploy WordPress to ECS Fargate using AWS CLI
  hosts: localhost
  connection: local
  gather_facts: true

  vars_files:
    - vars/wordpress.yml

  environment:
    AWS_ACCESS_KEY_ID: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
    AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    AWS_DEFAULT_REGION: "{{ aws_region }}"

  tasks:
    - name: Display deployment information
      debug:
        msg: |
          Starting WordPress ECS Deployment
          =================================
          Environment: {{ environment }}
          Region: {{ aws_region }}
          Cluster: {{ ecs_cluster }}
          Service: {{ ecs_service }}
          Task Family: {{ ecs_task_family }}
          DB Host: {{ db_host }}
          Docker Image: {{ docker_image }}

    - name: Register new task definition using AWS CLI
      command:
        cmd: >-
          aws ecs register-task-definition
          --family "{{ ecs_task_family }}"
          --network-mode awsvpc
          --requires-compatibilities FARGATE
          --cpu 1024
          --memory 2048
          --execution-role-arn "arn:aws:iam::625041985992:role/ecsTaskExecutionRole"
          --container-definitions '[
            {
              "name": "wordpress",
              "image": "{{ docker_image }}",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "hostPort": 80,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "{{ cloudwatch_log_group }}",
                  "awslogs-region": "{{ aws_region }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "environment": [
                {"name": "WORDPRESS_DB_HOST", "value": "{{ db_host }}"},
                {"name": "WORDPRESS_DB_NAME", "value": "{{ db_name }}"},
                {"name": "WORDPRESS_DB_USER", "value": "{{ db_user }}"},
                {"name": "WORDPRESS_DB_PASSWORD", "value": "{{ db_password }}"}
              ]
            }
          ]'
          --region "{{ aws_region }}"
      register: task_definition_result
      tags: deploy

    - name: Extract task definition ARN
      set_fact:
        task_definition_arn: "{{ task_definition_result.stdout | from_json | json_query('taskDefinition.taskDefinitionArn') }}"
      tags: deploy

    - name: Update ECS service using AWS CLI
      command:
        cmd: >-
          aws ecs update-service
          --cluster "{{ ecs_cluster }}"
          --service "{{ ecs_service }}"
          --task-definition "{{ task_definition_arn }}"
          --desired-count "{{ desired_count }}"
          --region "{{ aws_region }}"
      register: service_update_result
      tags: deploy

    - name: Wait for service to stabilize
      command:
        cmd: >-
          aws ecs wait services-stable
          --cluster "{{ ecs_cluster }}"
          --services "{{ ecs_service }}"
          --region "{{ aws_region }}"
      tags: deploy

    - name: Display deployment status
      debug:
        msg: |
          âœ… WordPress Deployment Completed!
          ================================
          Service: {{ ecs_service }}
          Cluster: {{ ecs_cluster }}
          Task Definition: {{ task_definition_arn }}
          Status: Service updated successfully

          Next: Run monitoring to verify deployment health
      tags: deploy

- name: ðŸ“ˆ Monitor deployment results
  import_playbook: ansible-monitoring.yml
  tags: monitoring